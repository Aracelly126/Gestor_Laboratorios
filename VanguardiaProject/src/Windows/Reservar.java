/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Windows;

import CodesBD.CrudReservas;
import CodesBD.Reserva;
import ComponentesPropios.TablaReservas;
import Utils.Conex;
import Validaciones.Validaciones;
import com.mysql.jdbc.PreparedStatement;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class Reservar extends javax.swing.JFrame {

    private boolean reservaGuardada;
    String Fecha;
    private Reserva reserva;

    /**
     * Creates new form Reservar
     */
    public Reservar() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.reservaGuardada = false;
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                confirmarCierre();
            }
        });
        this.reserva = reserva;
        
    }
public void cargarDatosReserva(Reserva reserva) {
    if (reserva != null) {
        jtxtCedula.setText(reserva.getCedula());
        jtxtNombre.setText(reserva.getNombreUsuario());
        jtxtCorreo.setText(reserva.getCorreo());
        jtxtDescripcion.setText(reserva.getObservacion());
    } else {
        JOptionPane.showMessageDialog(null, "Reserva no encontrada o datos nulos.");
    }
}


//    public void cargarDatosDeReserva(String prestamoId) {
//        Reserva reserva = CrudReservas.obtenerReservaPorId(prestamoId);
//        if (reserva != null) {
//            jtxtCedula.setText(reserva.getCedula());
//            jtxtNombre.setText(reserva.getNombreUsuario());
//            jtxtCorreo.setText(reserva.getCorreo());
//            jtxtDescripcion.setText(reserva.getObservacion());
//        } else {
//            JOptionPane.showMessageDialog(null, "No se encontraron datos para la reserva.");
//        }
//    }



    public void setDatosReserva(String fecha, String bloque, String tipoEspacio, String numeroAula, String hora) {
        // Crear un arreglo para almacenar los datos de la reserva, incluida la hora
        Object[] reserva = {fecha, hora, bloque, tipoEspacio, numeroAula};

        // Agregar la reserva a la tabla
        tablaReservas2.agregarReserva(reserva);
    }

    public void consumirFecha(String Fecha) {
        this.Fecha = Fecha;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jbtnGuardar = new javax.swing.JButton();
        jbtnActualizar = new javax.swing.JButton();
        jtxtCedula = new javax.swing.JTextField();
        jtxtNombre = new javax.swing.JTextField();
        jtxtCorreo = new javax.swing.JTextField();
        jtxtDescripcion = new javax.swing.JTextField();
        Barrasuperior = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaReservas2 = new ComponentesPropios.TablaReservas();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setText("Cedula:");

        jLabel7.setText("Nombre:");

        jLabel8.setText("Correo:");

        jLabel9.setText("Descripcion:");

        jbtnGuardar.setText("Guardar");
        jbtnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnGuardarActionPerformed(evt);
            }
        });

        jbtnActualizar.setText("Actualizar");
        jbtnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnActualizarActionPerformed(evt);
            }
        });

        jtxtCedula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtCedulaActionPerformed(evt);
            }
        });

        Barrasuperior.setBackground(new java.awt.Color(176, 16, 37));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logofisei.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Dialog", 3, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("RESERVAS");

        javax.swing.GroupLayout BarrasuperiorLayout = new javax.swing.GroupLayout(Barrasuperior);
        Barrasuperior.setLayout(BarrasuperiorLayout);
        BarrasuperiorLayout.setHorizontalGroup(
            BarrasuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BarrasuperiorLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        BarrasuperiorLayout.setVerticalGroup(
            BarrasuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BarrasuperiorLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(BarrasuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jScrollPane2.setViewportView(tablaReservas2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Barrasuperior, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel8))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(23, 23, 23)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jbtnGuardar)
                                        .addGap(192, 192, 192)
                                        .addComponent(jbtnActualizar))
                                    .addComponent(jtxtDescripcion, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                                    .addComponent(jtxtNombre)
                                    .addComponent(jtxtCorreo)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(31, 31, 31)
                                .addComponent(jtxtCedula))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 686, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Barrasuperior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jtxtCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jtxtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jtxtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jtxtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnGuardar)
                    .addComponent(jbtnActualizar))
                .addGap(50, 50, 50))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnActualizarActionPerformed
        if (reserva != null) {
        // Validaciones básicas (ejemplo):
        if (jtxtCedula.getText().isEmpty() || jtxtNombre.getText().isEmpty() || !jtxtCorreo.getText().matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
            JOptionPane.showMessageDialog(this, "Por favor, asegúrese de que todos los campos estén llenos y el correo sea válido.");
            return; // Detiene la ejecución si hay un problema
        }

        // Preparar los datos para actualizar la reserva
        String cedula = jtxtCedula.getText();
        String nombre = jtxtNombre.getText();
        String correo = jtxtCorreo.getText();
        String descripcion = jtxtDescripcion.getText();
        String idEspacio = reserva.getIdEspacio(); // Asegúrate de que reserva.getIdEspacio() obtiene correctamente el ID

        // Intentar actualizar la reserva en la base de datos
        boolean resultado = CrudReservas.actualizarReserva(idEspacio, cedula, nombre, correo, descripcion);
        if (resultado) {
            JOptionPane.showMessageDialog(this, "Reserva actualizada exitosamente!");
            this.dispose(); // Cierra el formulario si la actualización fue exitosa
        } else {
            JOptionPane.showMessageDialog(this, "Error al actualizar la reserva.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "No se ha cargado ninguna reserva para actualizar.");
    }
    }//GEN-LAST:event_jbtnActualizarActionPerformed

    private void jtxtCedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtCedulaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtCedulaActionPerformed

    private void jbtnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnGuardarActionPerformed
        guardarReserva();
    }//GEN-LAST:event_jbtnGuardarActionPerformed
    private String obtenerhora() {
        String hora = "";
        if (tablaReservas2.getRowCount() > 0 && tablaReservas2.getValueAt(0, 1) != null) {
            String[] Hora = String.valueOf(this.tablaReservas2.getValueAt(0, 1)).split(":");
            if (Hora.length > 0) {
                hora = Hora[0];
            }
        }
        return hora;
    }

    private String buscarIdAula() {
        String idAula = "";

        try {
            Connection conn = Conex.getConex();
            String queryBuscarIdAula = "SELECT ID_ESPACIO FROM espacios WHERE NOMBRE= ?";
            PreparedStatement declaración = (PreparedStatement) conn.prepareStatement(queryBuscarIdAula);
            if (tablaReservas2.getRowCount() > 0 && tablaReservas2.getValueAt(0, 4) != null) {
                declaración.setString(1, (String) this.tablaReservas2.getValueAt(0, 4));
                ResultSet resultado = declaración.executeQuery();
                if (resultado.next()) {
                    idAula = resultado.getString("ID_ESPACIO");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(HorariosFISEI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return idAula;
    }

    private boolean hayDatosEnCamposReserva() {
        return !jtxtCedula.getText().trim().isEmpty()
                || !jtxtNombre.getText().trim().isEmpty()
                || !jtxtCorreo.getText().trim().isEmpty()
                || !jtxtDescripcion.getText().trim().isEmpty();
    }

    private boolean esFormularioVacio() {
        return jtxtCedula.getText().trim().isEmpty()
                && jtxtNombre.getText().trim().isEmpty()
                && jtxtCorreo.getText().trim().isEmpty()
                && jtxtDescripcion.getText().trim().isEmpty()
                && (this.Fecha == null || this.Fecha.isEmpty())
                && (obtenerhora().isEmpty() || obtenerhora() == null);
    }

    private boolean validarCampos(String cedula, String nombre, String correo, String descripcion, String fecha, String hora) {
        if (cedula.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Cédula es obligatoria.");
            return false;
        }
        if (!Validaciones.validarCedula(cedula)) {
            JOptionPane.showMessageDialog(this, "Cédula inválida. Debe ingresar una cédula válida.");
            return false;
        }
        if (nombre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nombre es obligatorio.");
            return false;
        }
        if (!Validaciones.validarNombre(nombre)) {
            JOptionPane.showMessageDialog(this, "Nombre inválido. Debe contener solo letras.");
            return false;
        }
        if (correo.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Correo es obligatorio.");
            return false;
        }
        if (!Validaciones.validarCorreo(correo)) {
            JOptionPane.showMessageDialog(this, "Correo inválido. Debe contener un '@example.com o @uta.edu.ec'.");
            return false;
        }
        if (descripcion.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar una descripción.");
            return false;
        }
        if (fecha == null || fecha.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Fecha es obligatoria.");
            return false;
        }
        if (hora == null || hora.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Hora es obligatoria.");
            return false;
        }
        return true;
    }

    private void guardarReserva() {
        String cedula = jtxtCedula.getText().trim();
        String nombre = jtxtNombre.getText().trim();
        String correo = jtxtCorreo.getText().trim();
        String descripcion = jtxtDescripcion.getText().trim();
        String fecha = this.Fecha;
        String hora = obtenerhora();

        if (!validarCampos(cedula, nombre, correo, descripcion, fecha, hora)) {
            return; // No continuar si la validación falla
        }

        if (CrudReservas.guardarReserva(fecha, buscarIdAula(), hora, cedula, nombre, correo, descripcion)) {
            JOptionPane.showMessageDialog(this, "Reserva guardada exitosamente!");
            this.reservaGuardada = true; // Establecer como true si se guarda exitosamente
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Error al guardar la reserva.");
        }
    }

    public boolean reservaGuardadaExitosamente() {
        return this.reservaGuardada;
    }

    private void confirmarCierre() {
        if (!esFormularioVacio()) {
            // Datos parcialmente ingresados
            int option = JOptionPane.showConfirmDialog(this,
                    "¿Está seguro de que quiere salir sin guardar la reserva?",
                    "Confirmar Salida",
                    JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.NO_OPTION) {
                setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            } else {
                // Aquí cerramos la ventana sin guardar
                setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            }
        } else {
            // Formulario completamente vacío
            int option = JOptionPane.showConfirmDialog(this,
                    "No se han ingresado datos de la reserva. ¿Desea cerrar la ventana de todos modos?",
                    "Confirmar Salida",
                    JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.NO_OPTION) {
                setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            } else {
                // Aquí cerramos la ventana sin guardar
                setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reservar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reservar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reservar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reservar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reservar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Barrasuperior;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtnActualizar;
    private javax.swing.JButton jbtnGuardar;
    private javax.swing.JTextField jtxtCedula;
    private javax.swing.JTextField jtxtCorreo;
    private javax.swing.JTextField jtxtDescripcion;
    private javax.swing.JTextField jtxtNombre;
    private ComponentesPropios.TablaReservas tablaReservas2;
    // End of variables declaration//GEN-END:variables

}
